void test_complex_types()
{
    abilcmd val_abilcmd;
    actor val_actor;
    actorscope val_actorscope;
    aifilter val_aifilter;
    bank val_bank;
    bitmask val_bitmask;
    camerainfo val_camerainfo;
    color val_color;
    datetime val_datetime;
    doodad val_doodad;
    handle val_handle;
    generichandle val_generichandle;
    effecthistory val_effecthistory;
    marker val_marker;
    order val_order;
    playergroup val_playergroup;
    point val_point;
    region val_region;
    revealer val_revealer;
    sound val_sound;
    soundlink val_soundlink;
    timer val_timer;
    transmissionsource val_transmissionsource;
    trigger val_trigger;
    unit val_unit;
    unitfilter val_unitfilter;
    unitgroup val_unitgroup;
    unitref val_unitref;
    wave val_wave;
    waveinfo val_waveinfo;
    wavetarget val_wavetarget;

    // null
    val_abilcmd = null;
    val_actor = null;
    val_actorscope = null;
    val_aifilter = null;
    val_bank = null;
    val_bitmask = null;
    val_camerainfo = null;
    // val_color = null;
    val_datetime = null;
    val_doodad = null;
    val_handle = null;
    val_generichandle = null;
    val_effecthistory = null;
    val_marker = null;
    val_order = null;
    val_playergroup = null;
    val_point = null;
    val_region = null;
    val_revealer = null;
    val_sound = null;
    val_soundlink = null;
    val_timer = null;
    val_transmissionsource = null;
    val_trigger = null;
    val_unit = null;
    val_unitfilter = null;
    val_unitgroup = null;
    val_unitref = null;
    val_wave = null;
    val_waveinfo = null;
    val_wavetarget = null;

    // to handle
    val_handle = val_abilcmd;
    val_handle = val_actor;
    val_handle = val_actorscope;
    val_handle = val_aifilter;
    val_handle = val_bank;
    val_handle = val_bitmask;
    val_handle = val_camerainfo;
    // val_handle = val_color;
    val_handle = val_datetime;
    // val_handle = val_doodad;
    val_handle = val_handle;
    val_handle = val_generichandle;
    val_handle = val_effecthistory;
    val_handle = val_marker;
    val_handle = val_order;
    val_handle = val_playergroup;
    val_handle = val_point;
    val_handle = val_region;
    // val_handle = val_revealer;
    val_handle = val_sound;
    val_handle = val_soundlink;
    val_handle = val_timer;
    val_handle = val_transmissionsource;
    // val_handle = val_trigger;
    // val_handle = val_unit;
    val_handle = val_unitfilter;
    val_handle = val_unitgroup;
    val_handle = val_unitref;
    // val_handle = val_wave;
    val_handle = val_waveinfo;
    val_handle = val_wavetarget;

    // from handle
    val_abilcmd = val_handle;
    val_actor = val_handle;
    val_actorscope = val_handle;
    val_aifilter = val_handle;
    val_bank = val_handle;
    val_bitmask = val_handle;
    val_camerainfo = val_handle;
    // val_color = val_handle;
    val_datetime = val_handle;
    // val_doodad = val_handle;
    val_handle = val_handle;
    val_generichandle = val_handle;
    val_effecthistory = val_handle;
    val_marker = val_handle;
    val_order = val_handle;
    val_playergroup = val_handle;
    val_point = val_handle;
    val_region = val_handle;
    // val_revealer = val_handle;
    val_sound = val_handle;
    val_soundlink = val_handle;
    val_timer = val_handle;
    val_transmissionsource = val_handle;
    // val_trigger = val_handle;
    // val_unit = val_handle;
    val_unitfilter = val_handle;
    val_unitgroup = val_handle;
    val_unitref = val_handle;
    // val_wave = val_handle;
    val_waveinfo = val_handle;
    val_wavetarget = val_handle;
}
